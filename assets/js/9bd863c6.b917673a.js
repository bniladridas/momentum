"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[64],{86136:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>s});var t=o(74848),r=o(28453);const i={sidebar_position:3},l="Convert Model",a={id:"examples/convert_model",title:"Convert Model",description:"The convert_model example demonstrates how to convert a character model and its associated animation file between FBX and GLB formats. Use the -m or --model option to specify the input model, followed by the path to the model file (.fbx or .glb). If no input model is provided, the tool will automatically read the animation from an existing GLB or FBX file.",source:"@site/docs/03_examples/03_convert_model.md",sourceDirName:"03_examples",slug:"/examples/convert_model",permalink:"/momentum/docs/examples/convert_model",draft:!1,unlisted:!1,editUrl:"https://github.com/facebookincubator/momentum/edit/main/momentum/website/docs/03_examples/03_convert_model.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Process Markers",permalink:"/momentum/docs/examples/process_markers"},next:{title:"Development Environment",permalink:"/momentum/docs/developer_guide/development_environment"}},c={},s=[];function d(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components},{FbInternalOnly:o,OssOnly:i}=n;return o||h("FbInternalOnly",!0),i||h("OssOnly",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"convert-model",children:"Convert Model"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"convert_model"})," example demonstrates how to convert a character model and its associated animation file between FBX and GLB formats. Use the ",(0,t.jsx)(n.code,{children:"-m"})," or ",(0,t.jsx)(n.code,{children:"--model"})," option to specify the input model, followed by the path to the model file (",(0,t.jsx)(n.code,{children:".fbx"})," or ",(0,t.jsx)(n.code,{children:".glb"}),"). If no input model is provided, the tool will automatically read the animation from an existing GLB or FBX file."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"convert_model [OPTIONS]\n\nOptions:\n  -h,--help                   Print this help message and exit\n  -m,--model TEXT:FILE        Input model (.fbx/.glb); not required if reading animation from glb or fbx\n  -p,--parameters TEXT:FILE   Input model parameter file (.model)\n  -l,--locator TEXT:FILE      Input locator file (.locators)\n  -d,--motion TEXT:FILE       Input motion data file (.mmo/.glb/.fbx)\n  -o,--out TEXT REQUIRED      Output file (.fbx/.glb)\n  --out-locator TEXT          Output a locator file (.locators)\n  --save-markers              Save marker data from motion file in output (glb only)\n  -c,--character-mesh         (FBX Output file only) Saves the Character Mesh to the output file.\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example 1: Convert an fbx model to a glb model."}),"\n"]}),"\n",(0,t.jsx)(i,{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"pixi run convert_model -m character.fbx -p character.model -l character.locators -o character.glb\n"})})}),"\n",(0,t.jsx)(o,{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"buck2 run @<mode> convert_model -- -m character.fbx -p character.model -l character.locators -o character.glb\n"})})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example 2: Convert a glb file to an fbx file with animation curves only (without mesh)."}),"\n"]}),"\n",(0,t.jsx)(i,{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"pixi run convert_model -d animation.glb -o animation.fbx\n"})})}),"\n",(0,t.jsx)(o,{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"buck2 run @<mode> convert_model -- -d animation.glb -o animation.fbx\n"})})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example 3: Convert an fbx animation to glb with a given model parameter file. There is no guarantee the conversion is lossless. We will simply use InverseParameterTransform for a least square fit of the parameters."}),"\n"]}),"\n",(0,t.jsx)(i,{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"pixi run convert_model -d animation.fbx -p character.model -o animation.glb\n"})})}),"\n",(0,t.jsx)(o,{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"buck2 run @<mode> convert_model -- -d animation.fbx -p character.model -o animation.glb\n"})})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Example 4: Apply animation from an s0 model to a s4 model for high-res rendering (ie. with mesh). The ",(0,t.jsx)(n.code,{children:".model"})," file is needed if the target model is in ",(0,t.jsx)(n.code,{children:".fbx"})," format so we know how to map the input motion."]}),"\n"]}),"\n",(0,t.jsx)(i,{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"pixi run convert_model -m character.fbx -p character.model -d animation_s0.glb -o animation_s4.fbx -c\n"})})}),"\n",(0,t.jsx)(o,{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"buck2 run @<mode> convert_model -- -m character.fbx -p character.model -d animation_s0.glb -o animation_s4.fbx -c\n"})})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},28453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>a});var t=o(96540);const r={},i=t.createContext(r);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);